'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * ExaVault API
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */
(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ExaVaultApi);
  }
})(undefined, function (expect, ExaVaultApi) {
  'use strict';

  var instance;

  beforeEach(function () {
    instance = new ExaVaultApi.AccountAttributes();
  });

  var getProperty = function getProperty(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function') return object[getter]();else return object[property];
  };

  var setProperty = function setProperty(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function') object[setter](value);else object[property] = value;
  };

  describe('AccountAttributes', function () {
    it('should create an instance of AccountAttributes', function () {
      // uncomment below and update the code to test AccountAttributes
      //var instane = new ExaVaultApi.AccountAttributes();
      //expect(instance).to.be.a(ExaVaultApi.AccountAttributes);
    });

    it('should have the property accountName (base name: "accountName")', function () {
      // uncomment below and update the code to test the property accountName
      //var instane = new ExaVaultApi.AccountAttributes();
      //expect(instance).to.be();
    });

    it('should have the property username (base name: "username")', function () {
      // uncomment below and update the code to test the property username
      //var instane = new ExaVaultApi.AccountAttributes();
      //expect(instance).to.be();
    });

    it('should have the property maxUsers (base name: "maxUsers")', function () {
      // uncomment below and update the code to test the property maxUsers
      //var instane = new ExaVaultApi.AccountAttributes();
      //expect(instance).to.be();
    });

    it('should have the property userCount (base name: "userCount")', function () {
      // uncomment below and update the code to test the property userCount
      //var instane = new ExaVaultApi.AccountAttributes();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function () {
      // uncomment below and update the code to test the property status
      //var instane = new ExaVaultApi.AccountAttributes();
      //expect(instance).to.be();
    });

    it('should have the property branding (base name: "branding")', function () {
      // uncomment below and update the code to test the property branding
      //var instane = new ExaVaultApi.AccountAttributes();
      //expect(instance).to.be();
    });

    it('should have the property customDomain (base name: "customDomain")', function () {
      // uncomment below and update the code to test the property customDomain
      //var instane = new ExaVaultApi.AccountAttributes();
      //expect(instance).to.be();
    });

    it('should have the property quota (base name: "quota")', function () {
      // uncomment below and update the code to test the property quota
      //var instane = new ExaVaultApi.AccountAttributes();
      //expect(instance).to.be();
    });

    it('should have the property secureOnly (base name: "secureOnly")', function () {
      // uncomment below and update the code to test the property secureOnly
      //var instane = new ExaVaultApi.AccountAttributes();
      //expect(instance).to.be();
    });

    it('should have the property complexPasswords (base name: "complexPasswords")', function () {
      // uncomment below and update the code to test the property complexPasswords
      //var instane = new ExaVaultApi.AccountAttributes();
      //expect(instance).to.be();
    });

    it('should have the property showReferralLinks (base name: "showReferralLinks")', function () {
      // uncomment below and update the code to test the property showReferralLinks
      //var instane = new ExaVaultApi.AccountAttributes();
      //expect(instance).to.be();
    });

    it('should have the property externalDomains (base name: "externalDomains")', function () {
      // uncomment below and update the code to test the property externalDomains
      //var instane = new ExaVaultApi.AccountAttributes();
      //expect(instance).to.be();
    });

    it('should have the property allowedIp (base name: "allowedIp")', function () {
      // uncomment below and update the code to test the property allowedIp
      //var instane = new ExaVaultApi.AccountAttributes();
      //expect(instance).to.be();
    });

    it('should have the property callbackSettings (base name: "callbackSettings")', function () {
      // uncomment below and update the code to test the property callbackSettings
      //var instane = new ExaVaultApi.AccountAttributes();
      //expect(instance).to.be();
    });

    it('should have the property brandingSettings (base name: "brandingSettings")', function () {
      // uncomment below and update the code to test the property brandingSettings
      //var instane = new ExaVaultApi.AccountAttributes();
      //expect(instance).to.be();
    });

    it('should have the property clientId (base name: "clientId")', function () {
      // uncomment below and update the code to test the property clientId
      //var instane = new ExaVaultApi.AccountAttributes();
      //expect(instance).to.be();
    });

    it('should have the property welcomeEmailContent (base name: "welcomeEmailContent")', function () {
      // uncomment below and update the code to test the property welcomeEmailContent
      //var instane = new ExaVaultApi.AccountAttributes();
      //expect(instance).to.be();
    });

    it('should have the property welcomeEmailSubject (base name: "welcomeEmailSubject")', function () {
      // uncomment below and update the code to test the property welcomeEmailSubject
      //var instane = new ExaVaultApi.AccountAttributes();
      //expect(instance).to.be();
    });

    it('should have the property customSignature (base name: "customSignature")', function () {
      // uncomment below and update the code to test the property customSignature
      //var instane = new ExaVaultApi.AccountAttributes();
      //expect(instance).to.be();
    });

    it('should have the property accountOnboarding (base name: "accountOnboarding")', function () {
      // uncomment below and update the code to test the property accountOnboarding
      //var instane = new ExaVaultApi.AccountAttributes();
      //expect(instance).to.be();
    });

    it('should have the property created (base name: "created")', function () {
      // uncomment below and update the code to test the property created
      //var instane = new ExaVaultApi.AccountAttributes();
      //expect(instance).to.be();
    });

    it('should have the property modified (base name: "modified")', function () {
      // uncomment below and update the code to test the property modified
      //var instane = new ExaVaultApi.AccountAttributes();
      //expect(instance).to.be();
    });
  });
});